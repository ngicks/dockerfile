{{- if not .ParentImageName }}ARG UBUNTU_TAG={{- if not .UbuntuTag}}jammy-20220801{{- else}}{{- .UbuntuTag}}{{- end}}
{{- end}}

{{- if .UseRust}}
ARG RUST_VERSION={{.RustVersion}}
{{- end}}

{{- if .UseGo}}
ARG GO_VERSION={{.GoVersion}}
{{- end}}

{{- if .UseNode}}
ARG NODE_VERSION={{.NodeVersion}}
{{- end}}

{{- if .UseDeno}}
ARG DENO_VERSION={{.DenoVersion}}
{{- end}}

FROM krallin/ubuntu-tini:trusty AS tini_bin
{{- if .UseRust}}
FROM rust:${RUST_VERSION}-slim-buster AS rust_bin
{{- end}}

{{- if .UseGo}}
FROM golang:${GO_VERSION}-bullseye AS go_bin
{{- end}}

{{- if .UseNode}}
FROM node:${NODE_VERSION}-bullseye AS node_bin
{{- end}}

{{- if .UseDeno}}
FROM denoland/deno:bin-${DENO_VERSION} AS deno_bin
{{- end}}

{{- if not .ParentImageName}}

FROM ubuntu:${UBUNTU_TAG}
{{- else}}

FROM {{.ParentImageName}}:{{.ParentImageTag}}
{{- end}}

{{- if or .UseNode .UseRust}}

ARG LIBS_DEP="autoconf automake bzip2 dpkg-dev file g++ gcc imagemagick libbz2-dev libc6-dev\
    libcurl4-openssl-dev libdb-dev libevent-dev libffi-dev libgdbm-dev libglib2.0-dev libgmp-dev\
    libjpeg-dev libkrb5-dev liblzma-dev libmagickcore-dev libmagickwand-dev libmaxminddb-dev\
    libncurses5-dev libncursesw5-dev libpng-dev libpq-dev libreadline-dev libsqlite3-dev libssl-dev\
    libtool libwebp-dev libxml2-dev libxslt-dev libyaml-dev make patch unzip xz-utils zlib1g-dev\
    libmysqlclient-dev"
RUN apt-get update && apt-get install -y ${LIBS_DEP}
{{- end}}

ARG NETBASE="ca-certificates curl netbase wget"
ARG DEV_DEP="git less"
{{- if .UseRust}}
ARG BINDGEN_DEP="llvm-dev libclang-dev clang"
{{- end}}
{{- if .UseGo}}
ARG GO_DEP="g++ gcc libc6-dev make pkg-config"
{{- end}}
RUN apt-get update && apt-get install -y\
    ${NETBASE}\
    ${DEV_DEP}{{- if .UseRust}}\
    ${BINDGEN_DEP}
{{- end}}{{- if .UseGo}}\
    ${GO_DEP}
{{- end}}

{{- if .Dood}}

# docker cli
RUN apt-get update && apt-get install -y\
    ca-certificates curl gnupg lsb-release &&\
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg &&\
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"\
    | tee /etc/apt/sources.list.d/docker.list > /dev/null &&\
    apt-get update && apt-get install -y\
    docker-ce docker-ce-cli containerd.io docker-compose-plugin
{{- end}}

COPY --from=tini_bin /usr/bin/tini /usr/bin/tini

{{- if .UseRust}}

# rust
COPY --from=rust_bin /usr/local/cargo /usr/local/cargo
COPY --from=rust_bin /usr/local/rustup /usr/local/rustup

ENV RUSTUP_HOME=/usr/local/rustup\
    CARGO_HOME=/usr/local/cargo\
    PATH=/usr/local/cargo/bin:$PATH\
    RUST_VERSION=${RUST_VERSION}

VOLUME [ "/usr/local/cargo", "/usr/local/rustup" ]
{{- end}}

{{- if .UseGo}}

# Go
COPY --from=go_bin /usr/local/go /usr/local/go
ENV GOPATH=/go\
    PATH=/go/bin:/usr/local/go/bin:$PATH
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"    
VOLUME [ "/go" ]
{{- end}}

{{- if .UseNode}}

# Node.js
COPY --from=node_bin /usr/local/include /usr/local/include
COPY --from=node_bin /usr/local/lib/node_modules /usr/local/lib/node_modules
COPY --from=node_bin /usr/local/share/man /usr/local/share/man
COPY --from=node_bin /usr/local/share/doc /usr/local/share/doc
COPY --from=node_bin /usr/local/share/systemtap /usr/local/share/systemtap

COPY --from=node_bin /usr/local/bin/node /usr/local/bin/node
RUN ln -s /usr/local/lib/node_modules/corepack/dist/corepack.js /usr/local/bin/corepack &&\
    ln -s /usr/local/bin/node /usr/local/bin/nodejs &&\
    ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm &&\
    ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx 
VOLUME [ "/root/.npm" ]
{{- end}}

{{- if .UseDeno}}

# Deno
COPY --from=deno_bin /deno /usr/bin/deno
# see https://deno.land/manual/getting_started/setup_your_environment#environment-variables
ENV DENO_DIR=/deno/cache\
    DENO_INSTALL_ROOT=/deno\
    PATH=/deno/bin:$PATH
VOLUME [ "/deno" ]
{{- end}}

{{- if .EntryPoint}}

ENTRYPOINT {{.EntryPoint}}
{{else}}

ENTRYPOINT [ "/usr/bin/tini", "--", "/bin/bash" ]
{{end}}